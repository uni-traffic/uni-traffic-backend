// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(uuid())
  username           String          @unique
  firstName          String
  lastName           String
  email              String          @unique
  password           String
  isSuperAdmin       Boolean         @default(false)
  role               Role            @default(STUDENT)
  isDeleted          Boolean         @default(false)
  deletedAt          DateTime?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  reportedViolations UserViolation[] @relation("ViolationReporter")
  violations         UserViolation[]
  vehicles           Vehicle[]
}

enum Role {
  ADMIN
  SECURITY
  STUDENT
  STAFF
}

model Vehicle {
  id             String          @id @default(uuid())
  ownerId        String
  licensePlate   String          @unique
  color          String
  make           String
  series         String
  model          String
  images         String[]
  stickerNumber  String          @unique
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  type           VehicleType
  owner          User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  userViolations UserViolation[]
}

enum VehicleType {
  CAR
  MOTORCYCLE
}

model Violation {
  id             String          @id @default(uuid())
  category       String          @db.Char(1)
  violationName  String
  penalty        Float
  userViolations UserViolation[]
}

model UserViolation {
  id           String    @id @default(uuid())
  userId       String
  violationId  String
  vehicleId    String
  reportedById String
  reporter     User      @relation("ViolationReporter", fields: [reportedById], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle      Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  violation    Violation @relation(fields: [violationId], references: [id], onDelete: Cascade)
}

enum ViolationStatus {
  PENDING
  RESOLVED
}
