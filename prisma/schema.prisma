// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                      @id @default(uuid())
  username             String                      @unique
  firstName            String
  lastName             String
  email                String                      @unique
  password             String
  isSuperAdmin         Boolean                     @default(false)
  role                 Role                        @default(STUDENT)
  isDeleted            Boolean                     @default(false)
  deletedAt            DateTime?
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @updatedAt
  reportedViolations   ViolationRecord[]           @relation("ViolationReporter")
  violations           ViolationRecord[]
  vehicles             Vehicle[]
  transactedPayments   ViolationRecordPayment[]
  userSignInActivities UserSignInActivity[]
  vehicleScanLogs      VehicleScanLog[]
  vehicleApplication   VehicleApplication[]
  authoredChanges      AuditLog[]
  processedPayments    VehicleApplicationPayment[]
}

model UserSignInActivity {
  id     String   @id @unique @default(uuid())
  userId String
  time   DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  CASHIER
  SECURITY
  STUDENT
  STAFF
  GUEST
  UNVERIFIED
  SUPERADMIN
}

model Vehicle {
  id              String            @id @default(uuid())
  ownerId         String
  licensePlate    String            @unique
  color           String
  make            String
  series          String
  model           String
  images          String[]
  stickerNumber   String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  type            VehicleType
  status          VehicleStatus     @default(REGISTERED)
  owner           User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  violationRecord ViolationRecord[]
}

enum VehicleStatus {
  REGISTERED
  EXPIRED
}

enum VehicleType {
  CAR
  MOTORCYCLE
}

model VehicleApplication {
  id String @id @default(uuid())

  schoolId         String
  firstName        String
  lastName         String
  userType         UserType
  schoolCredential String

  driverFirstName    String
  driverLastName     String
  driverLicenseId    String
  driverLicenseImage String

  make                      String
  series                    String
  type                      VehicleType
  model                     String
  licensePlate              String
  certificateOfRegistration String
  officialReceipt           String

  frontImage String
  sideImage  String
  backImage  String

  status        VehicleApplicationStatus @default(PENDING_FOR_SECURITY_APPROVAL)
  stickerNumber String?                  @unique
  remarks       String?
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt

  applicantId String
  applicant   User   @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  payment VehicleApplicationPayment?
}

model VehicleApplicationPayment {
  id String @id @unique

  amountDue       Float
  cashTendered    Float
  change          Float
  totalAmountPaid Float

  vehicleApplicationId String             @unique
  vehicleApplication   VehicleApplication @relation(fields: [vehicleApplicationId], references: [id], onDelete: Cascade)

  date DateTime @default(now())

  cashierId String
  cashier   User   @relation(fields: [cashierId], references: [id], onDelete: Cascade)
}

enum VehicleApplicationStatus {
  APPROVED
  PENDING_FOR_STICKER
  PENDING_FOR_PAYMENT
  PENDING_FOR_SECURITY_APPROVAL
  REJECTED
}

enum UserType {
  STUDENT
  STAFF
}

model VehicleScanLog {
  id           String   @id @unique
  securityId   String
  licensePlate String
  time         DateTime @default(now())
  security     User     @relation(fields: [securityId], references: [id])
}

model Violation {
  id              String            @id @default(uuid())
  category        String            @db.Char(1)
  violationName   String
  penalty         Float
  violationRecord ViolationRecord[]
}

model ViolationRecord {
  id                     String                  @id @default(uuid())
  userId                 String
  violationId            String
  vehicleId              String
  reportedById           String
  remarks                String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  reporter               User                    @relation("ViolationReporter", fields: [reportedById], references: [id], onDelete: Cascade)
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle                Vehicle                 @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  violation              Violation               @relation(fields: [violationId], references: [id], onDelete: Cascade)
  status                 ViolationRecordStatus   @default(UNPAID)
  violationRecordPayment ViolationRecordPayment?
}

model ViolationRecordPayment {
  id                String          @id @unique
  cashierId         String
  violationRecordId String          @unique
  amountPaid        Float
  remarks           String?
  timePaid          DateTime        @default(now())
  violationRecord   ViolationRecord @relation(fields: [violationRecordId], references: [id], onDelete: Cascade)
  cashier           User            @relation(fields: [cashierId], references: [id], onDelete: Cascade)
}

enum ViolationRecordStatus {
  UNPAID
  PAID
}

model AuditLog {
  id String @id @unique @default(uuid())

  actionType AuditLogAction
  details    String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  actorId String
  actor   User   @relation(fields: [actorId], references: [id], onDelete: Cascade)

  objectId String

  @@index([actorId, objectId, actionType])
  @@index([createdAt])
}

enum AuditLogAction {
  UPDATE
  CREATE
  DELETE
}
